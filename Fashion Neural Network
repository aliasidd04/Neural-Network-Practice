'''
This code is for a neural network, based off a tutorial from the Tensorflow website and freeCodeCamp.org
The dataset is a group of images of various different pieces of clothing, labeled with the type of clothing they are
Each image is an array of 28x28 pixels, each pixel/value is in the range of 0 - 255 depending on its colour in greyscale
The model is trained by a list of known image-label combinations
Once trained the model should be able to correctly label what kind of clothing each testing image is
'''

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

# Uses keras to load in dataset
data = keras.datasets.fashion_mnist

# Splits data into testing and training data
(train_images, train_labels), (test_images, test_labels) = data.load_data()

# Each image is mapped to a label, represented by a number which indicates a position in a list
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# Modifies the pixel values so that they are less than 1, for ease in training the model
train_images = train_images/255
test_images = test_images/255

# Defining layers of model
model = keras.Sequential([
  keras.layers.Flatten(input_shape=(28,28)), # Input layer, flattened
  keras.layers.Dense(128, activation="relu"), # Hidden layer, relu stands for 'rectified linear unit'
  keras.layers.Dense(10, activation="softmax") # Output layer, softmax picks a value for each neuron so that they all add up to 1 (to resemble a probability)              
  ])

model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

model.fit(train_images, train_labels, epochs=5) # Trains model

test_loss, test_acc = model.evaluate(test_images, test_labels)

print("Tested Acc:", test_acc)

# Creates a 5x5 grid displaying the first 25 images, along with their predicted labels and actual labels
prediction = list(model.predict(test_images))
plt.figure(figsize=(13,15))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(test_images[i], cmap=plt.cm.binary)
    plt.xlabel("Actual: " + class_names[test_labels[i]])
    plt.title("Prediction: " + class_names[np.argmax(prediction[i])])
plt.show()
